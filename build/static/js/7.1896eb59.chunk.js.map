{"version":3,"sources":["views/component/Button.js","constant/Constants.js","views/component/Badge.js","views/component/Table.js","views/enterprises/Enterprises.js"],"names":["BackButton","props","label","onClick","color","shape","size","PostButton","PatchButton","DeleteButton","BottomButtons","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","patchLabel","deleteLabel","align","itemsPerPage","getStatusBadgeColor","status","tableStatusField","key","_style","width","filter","sorter","tableStatusScopedSlot","className","style","fontSize","getStatusBadgeText","cellStatusBadge","tableScopedSlots","item","tablePagination","doubleArrows","tableFilter","placeholder","Enterprises","history","useHistory","useState","enterprises","setEnterprises","useEffect","a","TempAdminApi","request","method","HttpMethod","GET","url","EndPoint","GET_ENTERPRISES","res","data","isSuccess","isEmpty","result","code","push","alert","message","console","log","getEnterprises","then","tableFields","_classes","items","fields","scopedSlots","hover","striped","onRowClick","enterpriseId","columnFilter","pagination"],"mappings":"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","file":"static/js/7.1896eb59.chunk.js","sourcesContent":["import {CButton, CCol, CRow} from \"@coreui/react\"\nimport React from \"react\"\n\n// 뒤로가기 버튼\nconst BackButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"뒤로가기\"}</CButton>\n  )\n}\n\n// 추가하기 버튼\nconst PostButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"추가하기\"}</CButton>\n  )\n}\n\n// 수정하기 버튼\nconst PatchButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"primary\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"수정하기\"}</CButton>\n  )\n}\n\n// 삭제하기 버튼\nconst DeleteButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"danger\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"삭제하기\"}</CButton>\n  )\n}\n\n// 하단 버튼 모듈\nconst BottomButtons = props => {\n  const {onBackClick, onPostClick, onPatchClick, onDeleteClick,\n    backLabel, postLabel, patchLabel, deleteLabel} = props\n\n  return (\n    <CRow>\n      {onBackClick ?\n        <CCol align=\"left\">\n          <BackButton label={backLabel} onClick={onBackClick}/>\n        </CCol> : <p/>\n      }\n      <CCol align=\"right\">\n        {onPostClick && <PostButton label={postLabel} onClick={onPostClick}/>}\n        &nbsp;&nbsp;\n        {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick}/>}\n        &nbsp;&nbsp;\n        {onDeleteClick &&  <DeleteButton label={deleteLabel} onClick={onDeleteClick}/>}\n      </CCol>\n      <br/><br/><br/>\n    </CRow>\n  )\n}\n\nexport default BottomButtons\n","export const itemsPerPage = 10\n","import React from \"react\"\nimport {CBadge} from \"@coreui/react\"\n\nfunction getStatusBadgeColor(status) {\n  switch (status) {\n    case \"ACTIVE\":     return \"success\"\n    case \"DEACTIVATE\": return \"secondary\"\n    case \"INACTIVE\":   return \"danger\"\n    default:           return \"primary\"\n  }\n}\n\nfunction getStatusBadgeText(status) {\n  switch (status) {\n    case \"ACTIVE\":     return \"활성\"\n    case \"DEACTIVATE\": return \"비활성\"\n    case \"INACTIVE\":   return \"탈퇴\"\n    default:           return \"\"\n  }\n}\n\nexport function cellStatusBadge(status) {\n  return (\n    <CBadge color={getStatusBadgeColor(status)}>{getStatusBadgeText(status)}</CBadge>\n  )\n}\n","import React from \"react\"\nimport {Button} from \"reactstrap\"\nimport Moment from \"react-moment\"\nimport {SizePerPageDropDown} from \"react-bootstrap-table\"\nimport {itemsPerPage} from \"../../constant/Constants\"\nimport {cellStatusBadge} from \"./Badge\"\nimport {CButton} from \"@coreui/react\"\n\n// tableField - 상태\nexport const tableStatusField = {\n  key: \"status\",\n  label: \"상태\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: true\n}\n\n// tableField - 조회\nexport const tableGetField = {\n  key: \"get\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableField - 수정\nexport const tablePatchField = {\n  key: \"patch\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableField - 삭제\nexport const tableDeleteField = {\n  key: \"delete\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableScopedSlot - 상태\nexport function tableStatusScopedSlot(status) {\n  return (\n    <td className=\"py-2\" style={{fontSize: \"18px\"}}>\n      {cellStatusBadge(status)}\n    </td>\n  )\n}\n\n// tableScopedSlot - 조회\nexport function tableGetScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"success\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        조회\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlot - 수정\nexport function tablePatchScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"primary\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        수정\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlot - 삭제\nexport function tableDeleteScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"danger\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        삭제\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlots - 기본값\nexport const tableScopedSlots = {\n  \"status\": item => tableStatusScopedSlot(item.status)\n}\n\n// tablePagination - 기본값\nexport const tablePagination = {\n  doubleArrows: true,\n  align: \"center\"\n}\n\n// tableFilter - 기본값\nexport function tableFilter(label, placeholder) {\n  return {\n    label: label,\n    placeholder: placeholder\n  }\n}\n\nexport const tableOptions = {\n  sortIndicator: true,\n  paginationSize: itemsPerPage,\n  clearSearch: true,\n  withFirstAndLast: true,\n  clearSearchBtn: createCustomClearButton,\n  sizePerPageDropDown: renderSizePerPageDropDown,\n  paginationShowsTotal: renderShowsTotal\n}\n\nexport const tableCustomOptions = {\n  sortIndicator: true,\n  paginationSize: itemsPerPage,\n  clearSearch: true,\n  withFirstAndLast: true,\n  sizePerPageDropDown: renderSizePerPageDropDown,\n  clearSearchBtn: createCustomClearButton,\n  paginationShowsTotal: renderShowsTotal\n}\n\nexport function renderShowsTotal(start, to, total) {\n  return (\n    <p style={{color: \"black\"}}>\n      From {start} to {to}, totals is {total}&nbsp;&nbsp;\n    </p>\n  )\n}\n\nexport function renderDate(cell, row, enumObject, rowIndex) {\n  if (!cell) {\n    return (\n      cell\n    )\n  }\n  return (\n    <Moment format=\"YYYY.MM.DD HH:mm:ss\">{cell}</Moment>\n  )\n}\n\nexport function renderMoney(cell, row, enumObject, rowIndex) {\n  if (!cell) {\n    return (\n      cell\n    )\n  }\n  return (\n    cell.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \"원\"\n  )\n}\n\n// size per page start\n\n/*\nfunction onToggleDropDown(toggleDropDown) {\n  // do your stuff here\n  //console.log(\"toggle dropdown\")\n  //toggleDropDown()\n}\n */\n\nfunction renderSizePerPageDropDown(props) {\n  return (\n    <SizePerPageDropDown\n      className=\"my-size-per-page\"\n      variation=\"dropup\"\n      {...props}\n      //onClick={() => onToggleDropDown(props.toggleDropDown)}\n    />\n  )\n}\n\n// size per page end\n\n\n// clear button custom start\nfunction handleClearButtonClick(onClick) {\n  // Custom your onClick event here,\n  // it's not necessary to implement this function if you have no any process before onClick\n  // console.log(\"This is my custom function for ClearSearchButton click event\")\n  onClick()\n}\n\nfunction createCustomClearButton(onClick) {\n  return (\n    <Button className=\"my-custom-class ml-2\" color=\"success\" size=\"sm\" onClick={e => handleClearButtonClick(onClick)}>\n      초기화</Button>\n  )\n  // If you want have more power to custom the child of ClearSearchButton,\n  // you can do it like following\n  // return (\n  //   <ClearSearchButton\n  //     btnContextual=\"btn-warning\"\n  //     className=\"my-custom-class\"\n  //     onClick={ () => this.handleClearButtonClick(onClick) }>\n  //     { ... }\n  //   </ClearSearchButton>\n  // )\n}\n\n// clear button custom end\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport { CCard, CCardBody, CCol, CDataTable } from '@coreui/react';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport { itemsPerPage } from '../../constant/Constants';\nimport { isEmpty } from '../../utils/common/commonFunction';\nimport { tablePagination, tableScopedSlots, tableStatusField } from '../component/Table';\nimport BottomButtons from '../component/Button';\n\nconst Enterprises = () => {\n    const history = useHistory();\n    const [enterprises, setEnterprises] = useState([]);\n\n    // 사용자 전체 조회 API 요청\n    useEffect(() => {\n        const getEnterprises = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_ENTERPRISES,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    if (res?.code === 2002) {\n                        history.push('/login');\n                    } else {\n                        alert(res.message);\n                    }\n                    return;\n                }\n\n                setEnterprises(res.result);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        };\n\n        getEnterprises().then();\n    }, []);\n\n    // 테이블 속성 - fields\n    const tableFields = [\n        {\n            key: 'enterpriseId',\n            _classes: 'font-weight-bold',\n            label: '고유번호',\n            _style: { width: '120px' },\n            filter: false,\n            sorter: true,\n        },\n        {\n            key: 'korName',\n            label: '한글 이름',\n            filter: true,\n            sorter: true,\n        },\n        {\n            key: 'engName',\n            label: '영어 이름',\n            filter: true,\n            sorter: true,\n        },\n        {\n            key: 'primeLocation',\n            label: '대표 위치',\n            filter: true,\n            sorter: true,\n        },\n        tableStatusField,\n    ];\n\n    // 테이블 셀 onClick\n    function onTableRowClick(item) {\n        history.push(`/enterprises/${item.enterpriseId}`);\n    }\n\n    return (\n        <CCol>\n            <CCard>\n                <CCardBody align=\"center\">\n                    <CDataTable\n                        items={enterprises}\n                        fields={tableFields}\n                        scopedSlots={tableScopedSlots}\n                        hover\n                        striped\n                        sorter\n                        onRowClick={onTableRowClick}\n                        columnFilter\n                        pagination={tablePagination}\n                        itemsPerPage={itemsPerPage}\n                    />\n                </CCardBody>\n            </CCard>\n        </CCol>\n    );\n};\n\nexport default Enterprises;\n"],"sourceRoot":""}