{"version":3,"sources":["views/component/Button.js","constant/Constants.js","views/component/cell/TextCell.js","views/component/Badge.js","views/component/Table.js","views/enterprises/Enterprise.js"],"names":["BackButton","props","label","onClick","color","shape","size","PostButton","PatchButton","DeleteButton","BottomButtons","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","patchLabel","deleteLabel","align","itemsPerPage","TextCell","type","placeholder","value","onChange","row","md","htmlFor","autoComplete","disabled","getStatusBadgeColor","status","tableStatusField","key","_style","width","filter","sorter","tableStatusScopedSlot","className","style","fontSize","getStatusBadgeText","cellStatusBadge","tableScopedSlots","item","tablePagination","doubleArrows","tableFilter","Enterprise","match","history","useHistory","useState","params","enterpriseId","korName","setKorName","engName","setEngName","category","setCategory","phoneNumber","setPhoneNumber","primeLocation","setPrimeLocation","location","setLocation","tag","setTag","description","setDescription","isEditing","programs","setPrograms","userId","a","TempAdminApi","request","method","HttpMethod","PATCH","url","EndPoint","PATCH_USER_STATUS","path","data","res","isSuccess","alert","message","push","console","log","useEffect","GET","GET_ENTERPRISE","isEmpty","result","enterprise1","enterprise","getEnterprise","then","GET_PROGRAMS","code","getPrograms","tableFields","_classes","e","target","display","justifyContent","items","fields","scopedSlots","hover","striped","onRowClick","programId","columnFilter","pagination","window","confirm","patchUserStatus"],"mappings":"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","file":"static/js/13.9327843c.chunk.js","sourcesContent":["import {CButton, CCol, CRow} from \"@coreui/react\"\nimport React from \"react\"\n\n// 뒤로가기 버튼\nconst BackButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"뒤로가기\"}</CButton>\n  )\n}\n\n// 추가하기 버튼\nconst PostButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"추가하기\"}</CButton>\n  )\n}\n\n// 수정하기 버튼\nconst PatchButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"primary\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"수정하기\"}</CButton>\n  )\n}\n\n// 삭제하기 버튼\nconst DeleteButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"danger\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"삭제하기\"}</CButton>\n  )\n}\n\n// 하단 버튼 모듈\nconst BottomButtons = props => {\n  const {onBackClick, onPostClick, onPatchClick, onDeleteClick,\n    backLabel, postLabel, patchLabel, deleteLabel} = props\n\n  return (\n    <CRow>\n      {onBackClick ?\n        <CCol align=\"left\">\n          <BackButton label={backLabel} onClick={onBackClick}/>\n        </CCol> : <p/>\n      }\n      <CCol align=\"right\">\n        {onPostClick && <PostButton label={postLabel} onClick={onPostClick}/>}\n        &nbsp;&nbsp;\n        {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick}/>}\n        &nbsp;&nbsp;\n        {onDeleteClick &&  <DeleteButton label={deleteLabel} onClick={onDeleteClick}/>}\n      </CCol>\n      <br/><br/><br/>\n    </CRow>\n  )\n}\n\nexport default BottomButtons\n","export const itemsPerPage = 10\n","import React from \"react\"\nimport {CCol, CFormGroup, CInput, CLabel} from \"@coreui/react\"\n\nconst TextCell = props => {\n\tconst {type, label, placeholder, value, onChange} = props\n\n\treturn (\n\t\t<CFormGroup row>\n\t\t\t<CCol md=\"2\" align=\"right\">\n\t\t\t\t<CLabel htmlFor=\"text-input\">{label}</CLabel>\n\t\t\t</CCol>\n\t\t\t<CCol>\n\t\t\t\t<CInput\n          type={type || \"text\"}\n          autoComplete={type === \"password\" ? \"on\" : \"off\"}\n\t\t\t\t\tdisabled={!onChange}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tvalue={value || \"\"}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</CCol>\n\t\t</CFormGroup>\n\t)\n}\n\nexport default TextCell\n","import React from \"react\"\nimport {CBadge} from \"@coreui/react\"\n\nfunction getStatusBadgeColor(status) {\n  switch (status) {\n    case \"ACTIVE\":     return \"success\"\n    case \"DEACTIVATE\": return \"secondary\"\n    case \"INACTIVE\":   return \"danger\"\n    default:           return \"primary\"\n  }\n}\n\nfunction getStatusBadgeText(status) {\n  switch (status) {\n    case \"ACTIVE\":     return \"활성\"\n    case \"DEACTIVATE\": return \"비활성\"\n    case \"INACTIVE\":   return \"탈퇴\"\n    default:           return \"\"\n  }\n}\n\nexport function cellStatusBadge(status) {\n  return (\n    <CBadge color={getStatusBadgeColor(status)}>{getStatusBadgeText(status)}</CBadge>\n  )\n}\n","import React from \"react\"\nimport {Button} from \"reactstrap\"\nimport Moment from \"react-moment\"\nimport {SizePerPageDropDown} from \"react-bootstrap-table\"\nimport {itemsPerPage} from \"../../constant/Constants\"\nimport {cellStatusBadge} from \"./Badge\"\nimport {CButton} from \"@coreui/react\"\n\n// tableField - 상태\nexport const tableStatusField = {\n  key: \"status\",\n  label: \"상태\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: true\n}\n\n// tableField - 조회\nexport const tableGetField = {\n  key: \"get\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableField - 수정\nexport const tablePatchField = {\n  key: \"patch\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableField - 삭제\nexport const tableDeleteField = {\n  key: \"delete\",\n  label: \"\",\n  _style: {width: \"120px\"},\n  filter: false,\n  sorter: false\n}\n\n// tableScopedSlot - 상태\nexport function tableStatusScopedSlot(status) {\n  return (\n    <td className=\"py-2\" style={{fontSize: \"18px\"}}>\n      {cellStatusBadge(status)}\n    </td>\n  )\n}\n\n// tableScopedSlot - 조회\nexport function tableGetScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"success\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        조회\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlot - 수정\nexport function tablePatchScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"primary\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        수정\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlot - 삭제\nexport function tableDeleteScopedSlot(onClick) {\n  return (\n    <td className=\"py-2\">\n      <CButton\n        color=\"danger\"\n        variant=\"outline\"\n        shape=\"square\"\n        size=\"sm\"\n        onClick={onClick}>\n        삭제\n      </CButton>\n    </td>\n  )\n}\n\n// tableScopedSlots - 기본값\nexport const tableScopedSlots = {\n  \"status\": item => tableStatusScopedSlot(item.status)\n}\n\n// tablePagination - 기본값\nexport const tablePagination = {\n  doubleArrows: true,\n  align: \"center\"\n}\n\n// tableFilter - 기본값\nexport function tableFilter(label, placeholder) {\n  return {\n    label: label,\n    placeholder: placeholder\n  }\n}\n\nexport const tableOptions = {\n  sortIndicator: true,\n  paginationSize: itemsPerPage,\n  clearSearch: true,\n  withFirstAndLast: true,\n  clearSearchBtn: createCustomClearButton,\n  sizePerPageDropDown: renderSizePerPageDropDown,\n  paginationShowsTotal: renderShowsTotal\n}\n\nexport const tableCustomOptions = {\n  sortIndicator: true,\n  paginationSize: itemsPerPage,\n  clearSearch: true,\n  withFirstAndLast: true,\n  sizePerPageDropDown: renderSizePerPageDropDown,\n  clearSearchBtn: createCustomClearButton,\n  paginationShowsTotal: renderShowsTotal\n}\n\nexport function renderShowsTotal(start, to, total) {\n  return (\n    <p style={{color: \"black\"}}>\n      From {start} to {to}, totals is {total}&nbsp;&nbsp;\n    </p>\n  )\n}\n\nexport function renderDate(cell, row, enumObject, rowIndex) {\n  if (!cell) {\n    return (\n      cell\n    )\n  }\n  return (\n    <Moment format=\"YYYY.MM.DD HH:mm:ss\">{cell}</Moment>\n  )\n}\n\nexport function renderMoney(cell, row, enumObject, rowIndex) {\n  if (!cell) {\n    return (\n      cell\n    )\n  }\n  return (\n    cell.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \"원\"\n  )\n}\n\n// size per page start\n\n/*\nfunction onToggleDropDown(toggleDropDown) {\n  // do your stuff here\n  //console.log(\"toggle dropdown\")\n  //toggleDropDown()\n}\n */\n\nfunction renderSizePerPageDropDown(props) {\n  return (\n    <SizePerPageDropDown\n      className=\"my-size-per-page\"\n      variation=\"dropup\"\n      {...props}\n      //onClick={() => onToggleDropDown(props.toggleDropDown)}\n    />\n  )\n}\n\n// size per page end\n\n\n// clear button custom start\nfunction handleClearButtonClick(onClick) {\n  // Custom your onClick event here,\n  // it's not necessary to implement this function if you have no any process before onClick\n  // console.log(\"This is my custom function for ClearSearchButton click event\")\n  onClick()\n}\n\nfunction createCustomClearButton(onClick) {\n  return (\n    <Button className=\"my-custom-class ml-2\" color=\"success\" size=\"sm\" onClick={e => handleClearButtonClick(onClick)}>\n      초기화</Button>\n  )\n  // If you want have more power to custom the child of ClearSearchButton,\n  // you can do it like following\n  // return (\n  //   <ClearSearchButton\n  //     btnContextual=\"btn-warning\"\n  //     className=\"my-custom-class\"\n  //     onClick={ () => this.handleClearButtonClick(onClick) }>\n  //     { ... }\n  //   </ClearSearchButton>\n  // )\n}\n\n// clear button custom end\n","import React, { useEffect, useState } from 'react';\nimport { CCard, CCardBody, CCol, CDataTable } from '@coreui/react';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport { isEmpty, isValidEmail, isValidPhoneNumber } from '../../utils/common/commonFunction';\nimport { useHistory } from 'react-router-dom';\nimport TextCell from '../component/cell/TextCell';\nimport BottomButtons from '../component/Button';\nimport { tablePagination, tableScopedSlots, tableStatusField } from '../component/Table';\nimport { itemsPerPage } from '../../constant/Constants';\n\nconst Enterprise = ({ match }) => {\n    const history = useHistory();\n    const [enterpriseId] = useState(match.params.enterpriseId);\n    const [korName, setKorName] = useState('');\n    const [engName, setEngName] = useState('');\n    const [category, setCategory] = useState(null);\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [primeLocation, setPrimeLocation] = useState('');\n    const [location, setLocation] = useState('');\n    const [tag, setTag] = useState('');\n    const [description, setDescription] = useState('');\n    const [isEditing, setIsEditing] = useState(false);\n    const [programs, setPrograms] = useState([]);\n\n    // 사용자 상세 조회 API 요청\n    useEffect(() => {\n        const getEnterprise = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_ENTERPRISE,\n                    path: { enterpriseId: enterpriseId },\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    alert(res.message);\n                    history.push('/enterprises');\n                    return;\n                }\n\n                const enterprise1 = res.result;\n                const enterprise = enterprise1[0];\n                setKorName(enterprise.korName);\n                setEngName(enterprise.engName);\n                setPhoneNumber(enterprise.phoneNumber);\n                setCategory(enterprise.category);\n                setPrimeLocation(enterprise.primeLocation);\n                setLocation(enterprise.location);\n                setTag(enterprise.tag);\n                setDescription(enterprise.description);\n                // if (enterprise.category == 1) {\n                //     setShowGender('남자');\n                // } else {\n                //     setShowGender('여자');\n                // }\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n                history.push('/enterprises');\n            }\n        };\n\n        getEnterprise().then();\n    }, []);\n\n    // 사용자 수정 API 요청\n    async function patchUser(parameters) {\n        try {\n            const { data: res } = await TempAdminApi.request({\n                method: HttpMethod.PATCH,\n                url: EndPoint.PATCH_USER,\n                path: { userId: enterpriseId },\n                data: parameters,\n            });\n\n            if (!res?.isSuccess || isEmpty(res?.result)) {\n                alert(res.message);\n                return;\n            }\n\n            alert('사용자 수정에 성공하였습니다.');\n            history.go(0);\n        } catch (error) {\n            console.log(error);\n            alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n        }\n    }\n\n    // 회원 탈퇴 API 요청\n    async function patchUserStatus(userId) {\n        try {\n            const { data: res } = await TempAdminApi.request({\n                method: HttpMethod.PATCH,\n                url: EndPoint.PATCH_USER_STATUS,\n                path: { userId: userId },\n                data: { status: 'INACTIVE' },\n            });\n\n            if (!res.isSuccess) {\n                alert(res.message);\n                return;\n            }\n\n            alert('사용자 삭제에 성공하였습니다.');\n            history.push('/users');\n        } catch (error) {\n            console.log(error);\n            alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n        }\n    }\n\n    // 뒤로가기 버튼 onClick\n    function onBackButtonClick() {\n        history.push(`/enterprises`);\n    }\n\n    // 수정 버튼 onClick\n    function onPatchButtonClick() {\n        // if (!isEditing) {\n        //     setIsEditing(true);\n        //     return;\n        // }\n        // if (isEmpty(email.trim())) {\n        //     alert('이메일을 입력해주세요.');\n        //     return;\n        // }\n        // if (!isValidEmail(email.trim())) {\n        //     alert('이메일 형식을 확인해주세요.');\n        //     return;\n        // }\n        // if (isEmpty(nickname.trim())) {\n        //     alert('닉네임을 입력해주세요.');\n        //     return;\n        // }\n        // if (!isEmpty(phoneNumber.trim()) && !isValidPhoneNumber(phoneNumber.trim())) {\n        //     alert('전화번호 형식을 확인해주세요.');\n        //     return;\n        // }\n        // if (window.confirm('수정하시겠습니까?')) {\n        //     const parameters = {\n        //         email: email.trim(),\n        //         nickname: nickname.trim(),\n        //         phoneNumber: phoneNumber.trim(),\n        //     };\n        //     patchUser(parameters).then();\n        // }\n    }\n\n    //프로그램 리스트 조회 API 요청\n    useEffect(() => {\n        const getPrograms = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_PROGRAMS,\n                    path: { enterpriseId: enterpriseId },\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    if (res?.code === 2002) {\n                        history.push('/enterprises');\n                    } else {\n                        alert(res.message);\n                    }\n                    return;\n                }\n\n                setPrograms(res.result);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        };\n\n        getPrograms().then();\n    }, []);\n\n    // 테이블 속성 - fields\n    const tableFields = [\n        {\n            key: 'programId',\n            _classes: 'font-weight-bold',\n            label: '고유번호',\n            _style: { width: '120px' },\n            filter: false,\n            sorter: true,\n        },\n        {\n            key: 'name',\n            label: '프로그램 이름',\n            filter: true,\n            sorter: true,\n        },\n        tableStatusField,\n    ];\n\n    // 테이블 셀 onClick\n    function onTableRowClick(item) {\n        history.push(`/programs/${item.programId}`);\n    }\n\n    // 삭제 버튼 onClick\n    function onDeleteButtonClick() {\n        if (window.confirm('정말로 삭제하시겠습니까?')) {\n            patchUserStatus(enterpriseId).then(() => {});\n        }\n    }\n\n    return (\n        <CCol>\n            <CCard>\n                <CCardBody>\n                    <div className=\"form-group\">\n                        <TextCell label=\"업체 고유번호\" value={enterpriseId} />\n                        <TextCell\n                            label=\"한글 이름\"\n                            placeholder=\"한글 이름을 입력해주세요\"\n                            value={korName}\n                            onChange={isEditing ? (e) => setKorName(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"영어 이름\"\n                            placeholder=\"영어 이름을 입력해주세요\"\n                            value={engName}\n                            onChange={isEditing ? (e) => setEngName(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"카테고리\"\n                            placeholder=\"카테고리를 입력해주세요\"\n                            value={category}\n                            onChange={isEditing ? (e) => setCategory(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"전화번호\"\n                            placeholder=\"전화번호를 입력해주세요\"\n                            value={phoneNumber}\n                            onChange={isEditing ? (e) => setPhoneNumber(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"대표주소\"\n                            placeholder=\"대표주소를 입력해주세요\"\n                            value={primeLocation}\n                            onChange={isEditing ? (e) => setPrimeLocation(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"주소\"\n                            placeholder=\"주소를 입력해주세요\"\n                            value={location}\n                            onChange={isEditing ? (e) => setLocation(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"태그\"\n                            placeholder=\"태그를 입력해주세요\"\n                            value={tag}\n                            onChange={isEditing ? (e) => setTag(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"설명\"\n                            placeholder=\"설명을 입력해주세요\"\n                            value={description}\n                            onChange={isEditing ? (e) => setDescription(e.target.value) : null}\n                        />\n                        <div style={{ width: '100%', display: 'flex', justifyContent: 'flex-end' }}>\n                            <CDataTable\n                                items={programs}\n                                fields={tableFields}\n                                scopedSlots={tableScopedSlots}\n                                hover\n                                striped\n                                sorter\n                                onRowClick={onTableRowClick}\n                                columnFilter\n                                pagination={tablePagination}\n                                itemsPerPage={itemsPerPage}\n                            />\n                        </div>\n                    </div>\n                </CCardBody>\n            </CCard>\n            <BottomButtons\n                onBackClick={onBackButtonClick}\n                onPatchClick={onPatchButtonClick}\n                onDeleteClick={onDeleteButtonClick}\n                patchLabel={isEditing ? '수정완료' : '수정하기'}\n            />\n        </CCol>\n    );\n};\n\nexport default Enterprise;\n"],"sourceRoot":""}