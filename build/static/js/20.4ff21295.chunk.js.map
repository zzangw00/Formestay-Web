{"version":3,"sources":["views/pages/login/Login.js","utils/common/commonFunction.js","constant/TempAdminApiMap.js","constant/TempAdminApi.js","utils/session/sessionManager.js","utils/session/expirySession.js"],"names":["Login","history","useHistory","useState","username","setUsername","password","setPassword","checkLogin","redirect","setRedirect","autoLogin","useCallback","push","onSubmitForm","e","a","preventDefault","isEmpty","trim","alert","TempAdminApi","request","data","email","method","HttpMethod","POST","url","EndPoint","POST_ADMIN_LOGIN","res","isSuccess","result","jwt","message","sessionSet","console","log","className","md","name","type","placeholder","autoComplete","value","onChange","target","xs","color","onClick","undefined","Object","keys","length","isValidEmail","match","isValidPhoneNumber","phoneNumber","API","process","GET_USERS","GET_USER","POST_USER","PATCH_USER","PATCH_USER_STATUS","GET_AUTO_LOGIN","POST_ADMIN","GET_ADMINS","GET_STATUS","GET_ENTERPRISES","GET_ENTERPRISE","GET_PROGRAMS","GET_PROGRAM","GET_PROGRAMIMAGES","GET_PROGRAMINFO","GET_MEALINFO","PATCH_ENTERPRISE","PATCH_ENTERPRISE_STATUS","POST_ENTERPRISE","PATCH_PROGRAM_STATUS","PATCH_PROGRAM","POST_ROOMPRICE","GET_ROOMPRICE","PATCH_ROOMPRICE","PATCH_ROOMPRICE_STATUS","POST_PROGRAM","GET_RESERVATIONS","GET_RESERVATION","PATCH_RESERVATION_REGIST","PATCH_RESERVATION_CANCLE","POST_PROGRAMIMAGE","PATCH_PROGRAMIMAGE_STATUS","PATCH_PROGRAMINFO","POST_PROGRAMINFO","PATCH_MEALINFO","POST_MEALINFO","GET_PAYMENTS","TempAdminApiMap","get","post","patch","put","delete","DELETE","GET","PUT","PATCH","query","path","Error","entries","key","replace","map","join","headers","getJwt","Axios","err","sessionGet","window","localStorage","clear","then","getItem","JSON","parse","cleanUpSession","expirationInMin","stringValue","expirationDate","Date","getTime","ISODate","moment","format","newValue","setItem","stringify","removeItem","sessionStorage"],"mappings":"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","file":"static/js/20.4ff21295.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardGroup,\n    CCol,\n    CContainer,\n    CForm,\n    CInput,\n    CInputGroup,\n    CInputGroupPrepend,\n    CInputGroupText,\n    CRow,\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport { sessionSet } from '../../../utils/session/expirySession';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../../constant/TempAdminApi';\nimport { checkLogin } from '../../../utils/session/sessionManager';\nimport { isEmpty } from '../../../utils/common/commonFunction';\n\nconst Login = () => {\n    const history = useHistory();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [redirect, setRedirect] = useState(checkLogin());\n\n    const autoLogin = useCallback(() => {\n        if (redirect) {\n            history.push('/');\n        }\n    }, [history, redirect]);\n\n    const onSubmitForm = useCallback(\n        async (e) => {\n            e.preventDefault();\n\n            if (isEmpty(username.trim())) {\n                alert('아이디를 입력해 주세요.');\n                return;\n            }\n\n            if (isEmpty(password)) {\n                alert('패스워드를 입력해 주세요.');\n                return;\n            }\n\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    data: {\n                        email: username.trim(),\n                        password: password,\n                    },\n                    method: HttpMethod.POST,\n                    url: EndPoint.POST_ADMIN_LOGIN,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result?.jwt)) {\n                    alert(res?.message);\n                    return;\n                }\n\n                sessionSet('jwt', res.result.jwt);\n                setRedirect(true);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        },\n        [username, password],\n    );\n\n    return (\n        <div className=\"c-app c-default-layout flex-row align-items-center\">\n            {autoLogin()}\n            <CContainer>\n                <CRow className=\"justify-content-center\">\n                    <CCol md=\"6\">\n                        <CCardGroup>\n                            <CCard className=\"p-4\">\n                                <CCardBody>\n                                    <CForm>\n                                        <h1>Login</h1>\n                                        <p className=\"text-muted\">Sign In to your account</p>\n                                        <CInputGroup className=\"mb-3\">\n                                            <CInputGroupPrepend>\n                                                <CInputGroupText>\n                                                    <CIcon name=\"cil-user\" />\n                                                </CInputGroupText>\n                                            </CInputGroupPrepend>\n                                            <CInput\n                                                type=\"text\"\n                                                placeholder=\"Username\"\n                                                autoComplete=\"username\"\n                                                value={username}\n                                                onChange={(e) => setUsername(e.target.value)}\n                                            />\n                                        </CInputGroup>\n                                        <CInputGroup className=\"mb-4\">\n                                            <CInputGroupPrepend>\n                                                <CInputGroupText>\n                                                    <CIcon name=\"cil-lock-locked\" />\n                                                </CInputGroupText>\n                                            </CInputGroupPrepend>\n                                            <CInput\n                                                type=\"password\"\n                                                placeholder=\"Password\"\n                                                autoComplete=\"current-password\"\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                            />\n                                        </CInputGroup>\n                                        <CRow>\n                                            <CCol xs=\"6\">\n                                                <CButton\n                                                    color=\"primary\"\n                                                    className=\"px-4\"\n                                                    onClick={onSubmitForm}\n                                                >\n                                                    Login\n                                                </CButton>\n                                            </CCol>\n                                            {/*<CCol xs=\"6\" className=\"text-right\">*/}\n                                            {/*  <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>*/}\n                                            {/*</CCol>*/}\n                                        </CRow>\n                                    </CForm>\n                                </CCardBody>\n                            </CCard>\n                            {/*<CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: \"44%\" }}>*/}\n                            {/*  <CCardBody className=\"text-center\">*/}\n                            {/*    <div>*/}\n                            {/*      <h2>Sign up</h2>*/}\n                            {/*      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut*/}\n                            {/*        labore et dolore magna aliqua.</p>*/}\n                            {/*      <Link to=\"/register\">*/}\n                            {/*        <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>*/}\n                            {/*      </Link>*/}\n                            {/*    </div>*/}\n                            {/*  </CCardBody>*/}\n                            {/*</CCard>*/}\n                        </CCardGroup>\n                    </CCol>\n                </CRow>\n            </CContainer>\n        </div>\n    );\n};\n\nexport default Login;\n","export const isEmpty = function (value) {\n  return (value === \"\" || value === null || value === undefined || (typeof value === \"object\" && !Object.keys(value).length))\n}\n\nexport function isValidEmail(email) {\n  return email.match(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/)\n}\n\nexport function isValidPhoneNumber(phoneNumber) {\n  return phoneNumber.match(/^01(?:0|1|[6-9])-(?:\\d{3}|\\d{4})-\\d{4}$/)\n}\n","const API = process.env.REACT_APP_API_URL;\nconsole.log(API);\n\nexport const EndPoint = {\n    POST_ADMIN_LOGIN: `${API}/login`,\n\n    GET_USERS: `${API}/users`,\n    GET_USER: `${API}/users/:userId`,\n    POST_USER: `${API}/users`,\n    PATCH_USER: `${API}/users/:userId`,\n    PATCH_USER_STATUS: `${API}/users/:userId/status`,\n\n    GET_AUTO_LOGIN: `${API}/auto-login`,\n\n    POST_ADMIN: `${API}`,\n    GET_ADMINS: `${API}/admins`,\n    GET_STATUS: `${API}`,\n\n    GET_ENTERPRISES: `${API}/enterprises`,\n    GET_ENTERPRISE: `${API}/enterprises/:enterpriseId`,\n\n    GET_PROGRAMS: `${API}/programs/:enterpriseId`,\n    GET_PROGRAM: `${API}/program/:programId`,\n    GET_PROGRAMIMAGES: `${API}/program/:programId/images`,\n    GET_PROGRAMINFO: `${API}/program/:programId/programInfo`,\n    GET_MEALINFO: `${API}/program/:programId/mealInfo`,\n\n    PATCH_ENTERPRISE: `${API}/enterprises/:enterpriseId`,\n    PATCH_ENTERPRISE_STATUS: `${API}/enterprises/:enterpriseId/status`,\n    POST_ENTERPRISE: `${API}/enterprise`,\n\n    PATCH_PROGRAM_STATUS: `${API}/program/:programId/status`,\n    PATCH_PROGRAM: `${API}/program/:programId`,\n\n    POST_ROOMPRICE: `${API}/program/price`,\n    GET_ROOMPRICE: `${API}/program/programRoomPrice/:programRoomPriceId`,\n    PATCH_ROOMPRICE: `${API}/program/programRoomPrice/:programRoomPriceId`,\n    PATCH_ROOMPRICE_STATUS: `${API}/programRoomPrice/:programRoomPriceId/status`,\n\n    POST_PROGRAM: `${API}/enterprise/:enterpriseId/program`,\n\n    GET_RESERVATIONS: `${API}/enterprise/:enterpriseId/reservations`,\n    GET_RESERVATION: `${API}/reservations/:reservationId`,\n\n    PATCH_RESERVATION_REGIST: `${API}/reservations/:reservationId/status`,\n    PATCH_RESERVATION_CANCLE: `${API}/reservations/:reservationId/status-out`,\n\n    POST_PROGRAMIMAGE: `${API}/program/:programId/images`,\n    PATCH_PROGRAMIMAGE_STATUS: `${API}/programImage/:programImageId/status`,\n\n    PATCH_PROGRAMINFO: `${API}/programInfo/:programInfoId/programInfo`,\n    POST_PROGRAMINFO: `${API}/program/:programId/programInfo`,\n\n    PATCH_MEALINFO: `${API}/mealInfo/:mealInfoId/mealInfo`,\n    POST_MEALINFO: `${API}/program/:programId/mealInfo`,\n\n    GET_PAYMENTS: `${API}/payments`,\n};\n\nconst TempAdminApiMap = {\n    get: {\n        [EndPoint.GET_USERS]: {},\n        [EndPoint.GET_USER]: {},\n        [EndPoint.GET_STATUS]: {},\n        [EndPoint.GET_ADMINS]: {},\n        [EndPoint.GET_ENTERPRISES]: {},\n        [EndPoint.GET_ENTERPRISE]: {},\n        [EndPoint.GET_AUTO_LOGIN]: {},\n        [EndPoint.GET_PROGRAMS]: {},\n        [EndPoint.GET_PROGRAM]: {},\n        [EndPoint.GET_PROGRAMIMAGES]: {},\n        [EndPoint.GET_ROOMPRICE]: {},\n        [EndPoint.GET_RESERVATIONS]: {},\n        [EndPoint.GET_RESERVATION]: {},\n        [EndPoint.GET_PROGRAMINFO]: {},\n        [EndPoint.GET_MEALINFO]: {},\n        [EndPoint.GET_PAYMENTS]: {},\n    },\n    post: {\n        [EndPoint.POST_ADMIN_LOGIN]: {},\n        [EndPoint.POST_USER]: {},\n        [EndPoint.POST_ADMIN]: {},\n        [EndPoint.POST_ENTERPRISE]: {},\n        [EndPoint.POST_ROOMPRICE]: {},\n        [EndPoint.POST_PROGRAM]: {},\n        [EndPoint.POST_PROGRAMIMAGE]: {},\n        [EndPoint.POST_PROGRAMINFO]: {},\n        [EndPoint.POST_MEALINFO]: {},\n    },\n    patch: {\n        [EndPoint.PATCH_USER]: {},\n        [EndPoint.PATCH_USER_STATUS]: {},\n        [EndPoint.PATCH_ENTERPRISE]: {},\n        [EndPoint.PATCH_ENTERPRISE_STATUS]: {},\n        [EndPoint.PATCH_PROGRAM_STATUS]: {},\n        [EndPoint.PATCH_PROGRAM]: {},\n        [EndPoint.PATCH_ROOMPRICE]: {},\n        [EndPoint.PATCH_ROOMPRICE_STATUS]: {},\n        [EndPoint.PATCH_RESERVATION_REGIST]: {},\n        [EndPoint.PATCH_RESERVATION_CANCLE]: {},\n        [EndPoint.PATCH_PROGRAMIMAGE_STATUS]: {},\n        [EndPoint.PATCH_PROGRAMINFO]: {},\n        [EndPoint.PATCH_MEALINFO]: {},\n    },\n    put: {},\n    delete: {},\n};\n\nexport default TempAdminApiMap;\n","import Axios from \"axios\"\nimport TempAdminApiMap from \"./TempAdminApiMap\"\nimport {getJwt} from \"../utils/session/sessionManager\"\nimport {isEmpty} from \"../utils/common/commonFunction\"\n\nexport {EndPoint} from \"./TempAdminApiMap\"\nexport const HttpMethod = {\n    DELETE: \"delete\",\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\",\n    PATCH: \"patch\",\n}\n\nexport default class TempAdminApi {\n    static request({data, query, path, method, url}) {\n        try {\n            if (isEmpty(method) || isEmpty(url)) {\n                throw new Error(\"TempAdminApi needs url and method\")\n            }\n\n            const api = TempAdminApiMap[method][url]\n            if (api === undefined) {\n                throw new Error(`TempAdminApi does not have the mapping ${method}, ${url}`)\n            }\n\n            if (path) {\n                for (const [key, value] of Object.entries(path)) {\n                    url = url.replace(`:${key}`, value)\n                }\n            }\n\n            if (!isEmpty(query)) {\n                url += \"?\" + Object.keys(query).map(key => key + \"=\" + query[key]).join(\"&\")\n            }\n\n            const headers = {\n              \"accept\": \"application/json\",\n              \"Content-Type\": \"application/json\",\n              \"X-Access-Token\": getJwt()\n            }\n\n            switch (method) {\n                case HttpMethod.GET:\n                    return Axios.get(url, {headers: headers})\n                case HttpMethod.POST:\n                    return Axios.post(url, data, {headers: headers})\n                case HttpMethod.PATCH:\n                    return Axios.patch(url, data, {headers: headers})\n                case HttpMethod.PUT:\n                    return Axios.put(url, data, {headers: headers})\n                case HttpMethod.DELETE:\n                    return Axios.delete(url, data, {headers: headers})\n                default:\n                    break\n            }\n        } catch (err) {\n            return \"axios cannot be created\"\n        }\n    }\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { sessionGet } from './expirySession';\nimport { isEmpty } from '../common/commonFunction';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\n\nexport function checkLogin() {\n    if (!isEmpty(sessionGet('jwt'))) {\n        const autoLogin = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_AUTO_LOGIN,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    return false;\n                }\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        };\n        autoLogin().then();\n        return true;\n    }\n\n    window.localStorage.clear();\n    return false;\n}\n\nexport function getJwt() {\n    let jwt = window.localStorage.getItem('jwt');\n    if (isEmpty(jwt)) {\n        return;\n    }\n    return JSON.parse(jwt).value;\n}\n\nexport function cleanUpSession() {\n    window.localStorage.clear();\n}\n","// get from session (if the value expired it is destroyed)\nimport moment from \"moment\"\n\nexport function sessionGet(key,expirationInMin = 360) {\n    let stringValue = window.localStorage.getItem(key)\n    if (stringValue !== null) {\n        let value = JSON.parse(stringValue)\n        let expirationDate = new Date(value.expirationDate)\n        if (expirationDate > new Date()) {\n            //시간 연장\n            let expirationDate = new Date(new Date().getTime() + (60000 * expirationInMin))\n            let ISODate = moment(expirationDate).format(\"YYYY[-]MM[-]DD HH:mm:ss\") // 포맷을 변경\n            let newValue = {\n                value: value.value,\n                expirationDate: ISODate\n            }\n            window.localStorage.setItem(key, JSON.stringify(newValue))\n            return value.value\n        } else {\n            window.localStorage.removeItem(key)\n        }\n    }\n    return null\n}\n\n// add into session\nexport function  sessionSet(key, value, expirationInMin = 360) {\n    let expirationDate = new Date(new Date().getTime() + (60000 * expirationInMin))\n    let ISODate = moment(expirationDate).format(\"YYYY[-]MM[-]DD HH:mm:ss\") // 포맷을 변경\n    let newValue = {\n        value: value,\n        expirationDate: ISODate\n    }\n    window.sessionStorage.setItem(key, JSON.stringify(newValue))\n    window.localStorage.setItem(key, JSON.stringify(newValue))\n}\n\n// add into session\nexport function  getName() {\n    let stringValue = window.localStorage.getItem(\"name\")\n    if (stringValue !== null) {\n        let value = JSON.parse(stringValue)\n        return value.value\n    }\n}\n\n"],"sourceRoot":""}