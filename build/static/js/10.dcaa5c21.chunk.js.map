{"version":3,"sources":["utils/common/commonFunction.js","constant/TempAdminApiMap.js","constant/TempAdminApi.js","utils/session/sessionManager.js","utils/session/expirySession.js","views/users/UsersData.js","views/pages/login/Login.js"],"names":["isEmpty","value","undefined","Object","keys","length","isValidEmail","email","match","isValidPhoneNumber","phoneNumber","API","process","console","log","EndPoint","POST_ADMIN_LOGIN","GET_USERS","GET_USER","POST_USER","PATCH_USER","PATCH_USER_STATUS","GET_AUTO_LOGIN","POST_ADMIN","GET_ENTERPRISES","GET_ENTERPRISE","GET_PROGRAMS","TempAdminApiMap","get","post","patch","put","delete","HttpMethod","DELETE","GET","POST","PUT","PATCH","TempAdminApi","data","query","path","method","url","Error","entries","key","replace","map","join","headers","getJwt","Axios","err","checkLogin","sessionGet","window","localStorage","clear","a","request","res","isSuccess","result","alert","autoLogin","then","jwt","getItem","JSON","parse","cleanUpSession","expirationInMin","stringValue","expirationDate","Date","getTime","ISODate","moment","format","newValue","setItem","stringify","removeItem","sessionSet","sessionStorage","usersData","userIdx","nickname","status","Login","history","useHistory","useState","username","setUsername","password","setPassword","redirect","setRedirect","useCallback","push","onSubmitForm","e","preventDefault","trim","message","className","md","name","type","placeholder","autoComplete","onChange","target","xs","color","onClick"],"mappings":"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","file":"static/js/10.dcaa5c21.chunk.js","sourcesContent":["export const isEmpty = function (value) {\n  return (value === \"\" || value === null || value === undefined || (typeof value === \"object\" && !Object.keys(value).length))\n}\n\nexport function isValidEmail(email) {\n  return email.match(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/)\n}\n\nexport function isValidPhoneNumber(phoneNumber) {\n  return phoneNumber.match(/^01(?:0|1|[6-9])-(?:\\d{3}|\\d{4})-\\d{4}$/)\n}\n","const API = process.env.REACT_APP_API_URL;\nconsole.log(API);\n\nexport const EndPoint = {\n    POST_ADMIN_LOGIN: `${API}/login`,\n\n    GET_USERS: `${API}/users`,\n    GET_USER: `${API}/users/:userId`,\n    POST_USER: `${API}/users`,\n    PATCH_USER: `${API}/users/:userId`,\n    PATCH_USER_STATUS: `${API}/users/:userId/status`,\n\n    GET_AUTO_LOGIN: `${API}/auto-login`,\n\n    POST_ADMIN: `${API}`,\n\n    GET_ENTERPRISES: `${API}/enterprises`,\n    GET_ENTERPRISE: `${API}/enterprises/:enterpriseId`,\n\n    GET_PROGRAMS: `${API}/programs/:enterpriseId`,\n};\n\nconst TempAdminApiMap = {\n    get: {\n        [EndPoint.GET_USERS]: {},\n        [EndPoint.GET_USER]: {},\n        [EndPoint.GET_ENTERPRISES]: {},\n        [EndPoint.GET_ENTERPRISE]: {},\n        [EndPoint.GET_AUTO_LOGIN]: {},\n        [EndPoint.GET_PROGRAMS]: {},\n    },\n    post: {\n        [EndPoint.POST_ADMIN_LOGIN]: {},\n        [EndPoint.POST_USER]: {},\n        [EndPoint.POST_ADMIN]: {},\n    },\n    patch: {\n        [EndPoint.PATCH_USER]: {},\n        [EndPoint.PATCH_USER_STATUS]: {},\n    },\n    put: {},\n    delete: {},\n};\n\nexport default TempAdminApiMap;\n","import Axios from \"axios\"\nimport TempAdminApiMap from \"./TempAdminApiMap\"\nimport {getJwt} from \"../utils/session/sessionManager\"\nimport {isEmpty} from \"../utils/common/commonFunction\"\n\nexport {EndPoint} from \"./TempAdminApiMap\"\nexport const HttpMethod = {\n    DELETE: \"delete\",\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\",\n    PATCH: \"patch\",\n}\n\nexport default class TempAdminApi {\n    static request({data, query, path, method, url}) {\n        try {\n            if (isEmpty(method) || isEmpty(url)) {\n                throw new Error(\"TempAdminApi needs url and method\")\n            }\n\n            const api = TempAdminApiMap[method][url]\n            if (api === undefined) {\n                throw new Error(`TempAdminApi does not have the mapping ${method}, ${url}`)\n            }\n\n            if (path) {\n                for (const [key, value] of Object.entries(path)) {\n                    url = url.replace(`:${key}`, value)\n                }\n            }\n\n            if (!isEmpty(query)) {\n                url += \"?\" + Object.keys(query).map(key => key + \"=\" + query[key]).join(\"&\")\n            }\n\n            const headers = {\n              \"accept\": \"application/json\",\n              \"Content-Type\": \"application/json\",\n              \"X-Access-Token\": getJwt()\n            }\n\n            switch (method) {\n                case HttpMethod.GET:\n                    return Axios.get(url, {headers: headers})\n                case HttpMethod.POST:\n                    return Axios.post(url, data, {headers: headers})\n                case HttpMethod.PATCH:\n                    return Axios.patch(url, data, {headers: headers})\n                case HttpMethod.PUT:\n                    return Axios.put(url, data, {headers: headers})\n                case HttpMethod.DELETE:\n                    return Axios.delete(url, data, {headers: headers})\n                default:\n                    break\n            }\n        } catch (err) {\n            return \"axios cannot be created\"\n        }\n    }\n}\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { sessionGet } from './expirySession';\nimport { isEmpty } from '../common/commonFunction';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport usersData from '../../views/users/UsersData';\n\nexport function checkLogin() {\n    if (!isEmpty(sessionGet('jwt'))) {\n        const autoLogin = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_AUTO_LOGIN,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    return false;\n                }\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        };\n        autoLogin().then();\n        return true;\n    }\n\n    window.localStorage.clear();\n    return false;\n}\n\nexport function getJwt() {\n    let jwt = window.localStorage.getItem('jwt');\n    if (isEmpty(jwt)) {\n        return;\n    }\n    return JSON.parse(jwt).value;\n}\n\nexport function cleanUpSession() {\n    window.localStorage.clear();\n}\n","// get from session (if the value expired it is destroyed)\nimport moment from \"moment\"\n\nexport function sessionGet(key,expirationInMin = 360) {\n    let stringValue = window.localStorage.getItem(key)\n    if (stringValue !== null) {\n        let value = JSON.parse(stringValue)\n        let expirationDate = new Date(value.expirationDate)\n        if (expirationDate > new Date()) {\n            //시간 연장\n            let expirationDate = new Date(new Date().getTime() + (60000 * expirationInMin))\n            let ISODate = moment(expirationDate).format(\"YYYY[-]MM[-]DD HH:mm:ss\") // 포맷을 변경\n            let newValue = {\n                value: value.value,\n                expirationDate: ISODate\n            }\n            window.localStorage.setItem(key, JSON.stringify(newValue))\n            return value.value\n        } else {\n            window.localStorage.removeItem(key)\n        }\n    }\n    return null\n}\n\n// add into session\nexport function  sessionSet(key, value, expirationInMin = 360) {\n    let expirationDate = new Date(new Date().getTime() + (60000 * expirationInMin))\n    let ISODate = moment(expirationDate).format(\"YYYY[-]MM[-]DD HH:mm:ss\") // 포맷을 변경\n    let newValue = {\n        value: value,\n        expirationDate: ISODate\n    }\n    window.sessionStorage.setItem(key, JSON.stringify(newValue))\n    window.localStorage.setItem(key, JSON.stringify(newValue))\n}\n\n// add into session\nexport function  getName() {\n    let stringValue = window.localStorage.getItem(\"name\")\n    if (stringValue !== null) {\n        let value = JSON.parse(stringValue)\n        return value.value\n    }\n}\n\n","const usersData = [\n  {userIdx: 0,  nickname: \"zero\",   email: \"zero@softsquared.com\",   phoneNumber: \"010-0000-0000\", status: \"ACTIVE\"},\n  {userIdx: 1,  nickname: \"dory\",   email: \"dory@softsquared.com\",   phoneNumber: \"010-0101-0101\", status: \"INACTIVE\"},\n  {userIdx: 2,  nickname: \"ted\",    email: \"ted@softsquared.com\",    phoneNumber: \"010-0202-0202\", status: \"ACTIVE\"},\n  {userIdx: 3,  nickname: \"daphne\", email: \"daphne@softsquared.com\", phoneNumber: \"010-0303-0303\", status: \"ACTIVE\"},\n  {userIdx: 4,  nickname: \"grace\",  email: \"grace@softsquared.com\",  phoneNumber: \"010-0404-0404\", status: \"ACTIVE\"},\n  {userIdx: 5,  nickname: \"papa\",   email: \"papa@softsquared.com\",   phoneNumber: \"010-0505-0505\", status: \"INACTIVE\"},\n  {userIdx: 6,  nickname: \"yunix\",  email: \"yunix@softsquared.com\",  phoneNumber: \"010-0606-0606\", status: \"ACTIVE\"},\n  {userIdx: 7,  nickname: \"io\",     email: \"io@softsquared.com\",     phoneNumber: \"010-0707-0707\", status: \"ACTIVE\"},\n  {userIdx: 8,  nickname: \"radih\",  email: \"radih@softsquared.com\",  phoneNumber: \"010-0808-0808\", status: \"ACTIVE\"},\n  {userIdx: 9,  nickname: \"cookie\", email: \"cookie@softsquared.com\", phoneNumber: \"010-0909-0909\", status: \"ACTIVE\"},\n  {userIdx: 10, nickname: \"weaver\", email: \"weaver@softsquared.com\", phoneNumber: \"010-1010-1010\", status: \"INACTIVE\"},\n  {userIdx: 11, nickname: \"aien\",   email: \"aien@softsquared.com\",   phoneNumber: \"010-1111-1111\", status: \"ACTIVE\"},\n  {userIdx: 12, nickname: \"mary\",   email: \"mary@softsquared.com\",   phoneNumber: \"010-1212-1212\", status: \"ACTIVE\"},\n  {userIdx: 13, nickname: \"haling\", email: \"haling@softsquared.com\", phoneNumber: \"010-1313-1313\", status: \"ACTIVE\"},\n  {userIdx: 14, nickname: \"zero\",   email: \"zero@softsquared.com\",   phoneNumber: \"010-1414-1414\", status: \"ACTIVE\"},\n  {userIdx: 15, nickname: \"dory\",   email: \"dory@softsquared.com\",   phoneNumber: \"010-1515-1515\", status: \"ACTIVE\"},\n  {userIdx: 16, nickname: \"ted\",    email: \"ted@softsquared.com\",    phoneNumber: \"010-1616-1616\", status: \"INACTIVE\"},\n  {userIdx: 17, nickname: \"daphne\", email: \"daphne@softsquared.com\", phoneNumber: \"010-1717-1717\", status: \"ACTIVE\"},\n  {userIdx: 18, nickname: \"grace\",  email: \"grace@softsquared.com\",  phoneNumber: \"010-1818-1818\", status: \"ACTIVE\"},\n  {userIdx: 19, nickname: \"papa\",   email: \"papa@softsquared.com\",   phoneNumber: \"010-1919-1919\", status: \"ACTIVE\"},\n  {userIdx: 20, nickname: \"yunix\",  email: \"yunix@softsquared.com\",  phoneNumber: \"010-2020-2020\", status: \"ACTIVE\"},\n  {userIdx: 21, nickname: \"io\",     email: \"io@softsquared.com\",     phoneNumber: \"010-2121-2121\", status: \"INACTIVE\"},\n  {userIdx: 22, nickname: \"radih\",  email: \"radih@softsquared.com\",  phoneNumber: \"010-2222-2222\", status: \"ACTIVE\"},\n  {userIdx: 23, nickname: \"cookie\", email: \"cookie@softsquared.com\", phoneNumber: \"010-2323-2323\", status: \"ACTIVE\"},\n  {userIdx: 24, nickname: \"weaver\", email: \"weaver@softsquared.com\", phoneNumber: \"010-2424-2424\", status: \"ACTIVE\"},\n  {userIdx: 25, nickname: \"aien\",   email: \"aien@softsquared.com\",   phoneNumber: \"010-2525-2525\", status: \"ACTIVE\"},\n  {userIdx: 26, nickname: \"mary\",   email: \"mary@softsquared.com\",   phoneNumber: \"010-2626-2626\", status: \"INACTIVE\"},\n  {userIdx: 27, nickname: \"haling\", email: \"haling@softsquared.com\", phoneNumber: \"010-2727-2727\", status: \"ACTIVE\"},\n]\n\nexport default usersData\n","import React, { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardGroup,\n    CCol,\n    CContainer,\n    CForm,\n    CInput,\n    CInputGroup,\n    CInputGroupPrepend,\n    CInputGroupText,\n    CRow,\n} from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport { sessionSet } from '../../../utils/session/expirySession';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../../constant/TempAdminApi';\nimport { checkLogin } from '../../../utils/session/sessionManager';\nimport { isEmpty } from '../../../utils/common/commonFunction';\n\nconst Login = () => {\n    const history = useHistory();\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [redirect, setRedirect] = useState(checkLogin());\n\n    const autoLogin = useCallback(() => {\n        if (redirect) {\n            history.push('/');\n        }\n    }, [history, redirect]);\n\n    const onSubmitForm = useCallback(\n        async (e) => {\n            e.preventDefault();\n\n            if (isEmpty(username.trim())) {\n                alert('아이디를 입력해 주세요.');\n                return;\n            }\n\n            if (isEmpty(password)) {\n                alert('패스워드를 입력해 주세요.');\n                return;\n            }\n\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    data: {\n                        email: username.trim(),\n                        password: password,\n                    },\n                    method: HttpMethod.POST,\n                    url: EndPoint.POST_ADMIN_LOGIN,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result?.jwt)) {\n                    alert(res?.message);\n                    return;\n                }\n\n                sessionSet('jwt', res.result.jwt);\n                setRedirect(true);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        },\n        [username, password],\n    );\n\n    return (\n        <div className=\"c-app c-default-layout flex-row align-items-center\">\n            {autoLogin()}\n            <CContainer>\n                <CRow className=\"justify-content-center\">\n                    <CCol md=\"6\">\n                        <CCardGroup>\n                            <CCard className=\"p-4\">\n                                <CCardBody>\n                                    <CForm>\n                                        <h1>Login</h1>\n                                        <p className=\"text-muted\">Sign In to your account</p>\n                                        <CInputGroup className=\"mb-3\">\n                                            <CInputGroupPrepend>\n                                                <CInputGroupText>\n                                                    <CIcon name=\"cil-user\" />\n                                                </CInputGroupText>\n                                            </CInputGroupPrepend>\n                                            <CInput\n                                                type=\"text\"\n                                                placeholder=\"Username\"\n                                                autoComplete=\"username\"\n                                                value={username}\n                                                onChange={(e) => setUsername(e.target.value)}\n                                            />\n                                        </CInputGroup>\n                                        <CInputGroup className=\"mb-4\">\n                                            <CInputGroupPrepend>\n                                                <CInputGroupText>\n                                                    <CIcon name=\"cil-lock-locked\" />\n                                                </CInputGroupText>\n                                            </CInputGroupPrepend>\n                                            <CInput\n                                                type=\"password\"\n                                                placeholder=\"Password\"\n                                                autoComplete=\"current-password\"\n                                                value={password}\n                                                onChange={(e) => setPassword(e.target.value)}\n                                            />\n                                        </CInputGroup>\n                                        <CRow>\n                                            <CCol xs=\"6\">\n                                                <CButton\n                                                    color=\"primary\"\n                                                    className=\"px-4\"\n                                                    onClick={onSubmitForm}\n                                                >\n                                                    Login\n                                                </CButton>\n                                            </CCol>\n                                            {/*<CCol xs=\"6\" className=\"text-right\">*/}\n                                            {/*  <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>*/}\n                                            {/*</CCol>*/}\n                                        </CRow>\n                                    </CForm>\n                                </CCardBody>\n                            </CCard>\n                            {/*<CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: \"44%\" }}>*/}\n                            {/*  <CCardBody className=\"text-center\">*/}\n                            {/*    <div>*/}\n                            {/*      <h2>Sign up</h2>*/}\n                            {/*      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut*/}\n                            {/*        labore et dolore magna aliqua.</p>*/}\n                            {/*      <Link to=\"/register\">*/}\n                            {/*        <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>*/}\n                            {/*      </Link>*/}\n                            {/*    </div>*/}\n                            {/*  </CCardBody>*/}\n                            {/*</CCard>*/}\n                        </CCardGroup>\n                    </CCol>\n                </CRow>\n            </CContainer>\n        </div>\n    );\n};\n\nexport default Login;\n"],"sourceRoot":""}