{"version":3,"sources":["views/component/Button.js","views/component/cell/TextCell.js","views/component/cell/TextareaCell.js","views/component/cell/ImageCell.js","utils/firebase/uploadFirebase.js","utils/firebase/configFirebase.js","views/boards/AddBoard.js"],"names":["BackButton","props","label","onClick","color","shape","size","PostButton","PatchButton","DeleteButton","BottomButtons","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","patchLabel","deleteLabel","align","TextCell","type","placeholder","value","onChange","row","md","htmlFor","autoComplete","disabled","TextareaCell","rows","ImageCell","multiple","src","isLoading","accept","map","imageURL","index","key","height","fluid","style","width","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","storage","handleFirebaseUpload","path","filename","file","Promise","resolve","reject","ref","put","on","error","console","log","child","getDownloadURL","then","url","AddBoard","history","useHistory","useState","userIdx","setUserIdx","title","setTitle","contents","setContents","imageURLs","setImageURLs","parameters","a","TempAdminApi","request","method","HttpMethod","POST","EndPoint","POST_BOARD","data","res","isSuccess","isEmpty","result","alert","message","push","className","e","target","input","files","forEach","Date","getTime","name","sort","trim","window","confirm","postUser","imageUrls"],"mappings":"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","file":"static/js/11.cf093af2.chunk.js","sourcesContent":["import {CButton, CCol, CRow} from \"@coreui/react\"\nimport React from \"react\"\n\n// 뒤로가기 버튼\nconst BackButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"뒤로가기\"}</CButton>\n  )\n}\n\n// 추가하기 버튼\nconst PostButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"추가하기\"}</CButton>\n  )\n}\n\n// 수정하기 버튼\nconst PatchButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"primary\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"수정하기\"}</CButton>\n  )\n}\n\n// 삭제하기 버튼\nconst DeleteButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"danger\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"삭제하기\"}</CButton>\n  )\n}\n\n// 하단 버튼 모듈\nconst BottomButtons = props => {\n  const {onBackClick, onPostClick, onPatchClick, onDeleteClick,\n    backLabel, postLabel, patchLabel, deleteLabel} = props\n\n  return (\n    <CRow>\n      {onBackClick ?\n        <CCol align=\"left\">\n          <BackButton label={backLabel} onClick={onBackClick}/>\n        </CCol> : <p/>\n      }\n      <CCol align=\"right\">\n        {onPostClick && <PostButton label={postLabel} onClick={onPostClick}/>}\n        &nbsp;&nbsp;\n        {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick}/>}\n        &nbsp;&nbsp;\n        {onDeleteClick &&  <DeleteButton label={deleteLabel} onClick={onDeleteClick}/>}\n      </CCol>\n      <br/><br/><br/>\n    </CRow>\n  )\n}\n\nexport default BottomButtons\n","import React from \"react\"\nimport {CCol, CFormGroup, CInput, CLabel} from \"@coreui/react\"\n\nconst TextCell = props => {\n\tconst {type, label, placeholder, value, onChange} = props\n\n\treturn (\n\t\t<CFormGroup row>\n\t\t\t<CCol md=\"2\" align=\"right\">\n\t\t\t\t<CLabel htmlFor=\"text-input\">{label}</CLabel>\n\t\t\t</CCol>\n\t\t\t<CCol>\n\t\t\t\t<CInput\n          type={type || \"text\"}\n          autoComplete={type === \"password\" ? \"on\" : \"off\"}\n\t\t\t\t\tdisabled={!onChange}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tvalue={value || \"\"}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</CCol>\n\t\t</CFormGroup>\n\t)\n}\n\nexport default TextCell\n","import React from \"react\"\nimport {CCol, CFormGroup, CLabel, CTextarea} from \"@coreui/react\"\n\nconst TextareaCell = props => {\n  const {label, placeholder, value, onChange} = props\n\n  return (\n    <CFormGroup row>\n      <CCol md=\"2\" align=\"right\">\n        <CLabel htmlFor=\"text-input\">{label}</CLabel>\n      </CCol>\n      <CCol>\n        <CTextarea\n          rows=\"10\"\n          disabled={!onChange}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}/>\n      </CCol>\n    </CFormGroup>\n  )\n}\n\nexport default TextareaCell\n","import React from \"react\"\nimport {CCol, CFormGroup, CImg, CInputFile, CLabel, CSpinner} from \"@coreui/react\"\n\nconst ImageCell = props => {\n\tconst {multiple, label, src, isLoading, onChange} = props\n\n\treturn (\n\t\t<CFormGroup row>\n\t\t\t<CCol md=\"2\" align=\"right\">\n\t\t\t\t<CLabel htmlFor=\"text-input\">{label}</CLabel>\n\t\t\t</CCol>\n\t\t\t<CCol>\n\t\t\t\t{onChange && <>\n          <CInputFile multiple={multiple || false} accept=\"image/*\" onChange={onChange}/>\n          <br/>\n        </>}\n        {multiple\n          ? src.map((imageURL, index) => (\n            <CImg key={`image_${index}`} src={imageURL} height=\"150\" fluid/>\n          ))\n          : isLoading\n            ? <CSpinner style={{width: 120, height: 120}}/>\n            : <CImg src={src} height=\"150\" fluid/>\n        }\n\t\t\t</CCol>\n\t\t</CFormGroup>\n\t)\n}\n\nexport default ImageCell\n","import firebase from \"firebase\"\nimport {firebaseConfig} from \"./configFirebase\"\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\nexport const db = firebase.database()\nexport const storage = firebase.storage()\n\nexport function handleFirebaseUpload(path, filename, file) {\n  return new Promise(function (resolve, reject) {\n    const uploadTask = storage.ref(`${path}/${filename}`).put(file)\n    uploadTask.on(\"state_changed\", () => {\n      }, (error) => {\n        console.log(error)\n        reject()\n      }, () => {\n        storage.ref(`${path}`).child(filename).getDownloadURL().then((url) => {\n          resolve(url)\n        })\n      })\n  })\n}\n","export const firebaseConfig = {\n  apiKey: \"API키를 입력하세요\",\n  authDomain: \"파이어베이스 도메인\",\n  databaseURL: \"파이어베이스 디비 url\",\n  projectId: \"파이어베이스 프로젝트 아이디\",\n  storageBucket: \"파이어베이스 스토리지 버킷 정보\",\n  messagingSenderId: \"파이어베이스 메시지 센더 아이디\",\n  appId: \"앱 아이디\",\n  measurementId: \"measurement 아이디\"\n}\n","import React, {useState} from \"react\"\nimport {CCard, CCardBody, CCol, CRow} from \"@coreui/react\"\nimport TempAdminApi, {EndPoint, HttpMethod} from \"../../constant/TempAdminApi\"\nimport {isEmpty} from \"../../utils/common/commonFunction\"\nimport {useHistory} from \"react-router-dom\"\nimport {handleFirebaseUpload} from \"../../utils/firebase/uploadFirebase\"\nimport TextCell from \"../component/cell/TextCell\"\nimport TextareaCell from \"../component/cell/TextareaCell\"\nimport BottomButtons from \"../component/Button\"\nimport ImageCell from \"../component/cell/ImageCell\"\n\nconst AddBoard = () => {\n  const history = useHistory()\n\n  const [userIdx, setUserIdx] = useState(0)\n  const [title, setTitle] = useState(\"\")\n  const [contents, setContents] = useState(\"\")\n  const [imageURLs, setImageURLs] = useState([])\n\n  // 사용자 추가 API 요청\n  async function postUser(parameters) {\n    try {\n      const {data: res} = await TempAdminApi.request({\n        method: HttpMethod.POST,\n        url: EndPoint.POST_BOARD,\n        data: parameters\n      })\n\n      if (!res?.isSuccess || isEmpty(res?.result)) {\n        alert(res.message)\n        return\n      }\n\n      alert(\"게시물 추가에 성공하였습니다.\")\n      history.push(\"/boards\")\n    } catch (error) {\n      console.log(error)\n      alert(\"네트워크 통신 실패. 잠시후 다시 시도해주세요.\")\n    }\n  }\n\n  // 추가 버튼 onClick\n  function onPostButtonClick() {\n    if (isEmpty(title.trim())) {\n      alert(\"제목을 입력해주세요.\")\n    }\n    if (isEmpty(contents.trim())) {\n      alert(\"내용을 입력해주세요.\")\n    }\n\n    if (window.confirm(\"추가하시겠습니까?\")) {\n      const parameters = {\n        title: title.trim(),\n        contents: contents,\n        imageUrls: imageURLs\n      }\n      postUser(parameters).then()\n    }\n  }\n\n  // 이미지 추가 onClick\n  function onImageChange(input) {\n    setImageURLs(() => [])\n    input.target.files.forEach( (file, index) => {\n      const filename = `${new Date().getTime()}_${index}_${file.name}`\n      handleFirebaseUpload(\"web-admin/boards\", filename, file).then(url => {\n        setImageURLs(imageURLs => [...imageURLs, url].sort())\n      })\n    })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardBody>\n            <div className=\"form-group\">\n              <TextCell\n                label=\"사용자 고유번호\"\n                placeholder=\"사용자 고유번호를 입력해주세요\"\n                value={userIdx}\n                onChange={e => setUserIdx(e.target.value)}\n              />\n              <TextCell\n                label=\"제목\"\n                placeholder=\"제목을 입력해주세요\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n              />\n              <TextareaCell\n                label=\"내용\"\n                placeholder=\"내용을 입력해주세요\"\n                value={contents}\n                onChange={e => setContents(e.target.value)}\n              />\n              <ImageCell\n                multiple\n                label=\"이미지\"\n                src={imageURLs}\n                onChange={onImageChange}\n              />\n            </div>\n          </CCardBody>\n        </CCard>\n        <BottomButtons onPostClick={onPostButtonClick}/>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default AddBoard\n"],"sourceRoot":""}