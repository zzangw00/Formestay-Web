{"version":3,"sources":["views/component/Button.js","views/component/cell/TextCell.js","views/users/User.js"],"names":["BackButton","props","label","onClick","color","shape","size","PostButton","PatchButton","DeleteButton","BottomButtons","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","patchLabel","deleteLabel","align","TextCell","type","placeholder","value","onChange","row","md","htmlFor","autoComplete","disabled","User","match","history","useHistory","useState","params","userId","email","setEmail","nickname","setNickname","name","setName","phoneNumber","setPhoneNumber","isEditing","setIsEditing","showGender","setShowGender","birthday","setBirthday","parameters","a","TempAdminApi","request","method","HttpMethod","PATCH","url","EndPoint","PATCH_USER","path","data","res","isSuccess","alert","message","go","console","log","PATCH_USER_STATUS","status","push","useEffect","GET","GET_USER","isEmpty","result","user1","user","gender","getUser","then","className","e","target","trim","window","confirm","patchUser","patchUserStatus"],"mappings":"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","file":"static/js/17.af037df5.chunk.js","sourcesContent":["import {CButton, CCol, CRow} from \"@coreui/react\"\nimport React from \"react\"\n\n// 뒤로가기 버튼\nconst BackButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"뒤로가기\"}</CButton>\n  )\n}\n\n// 추가하기 버튼\nconst PostButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"추가하기\"}</CButton>\n  )\n}\n\n// 수정하기 버튼\nconst PatchButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"primary\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"수정하기\"}</CButton>\n  )\n}\n\n// 삭제하기 버튼\nconst DeleteButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"danger\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"삭제하기\"}</CButton>\n  )\n}\n\n// 하단 버튼 모듈\nconst BottomButtons = props => {\n  const {onBackClick, onPostClick, onPatchClick, onDeleteClick,\n    backLabel, postLabel, patchLabel, deleteLabel} = props\n\n  return (\n    <CRow>\n      {onBackClick ?\n        <CCol align=\"left\">\n          <BackButton label={backLabel} onClick={onBackClick}/>\n        </CCol> : <p/>\n      }\n      <CCol align=\"right\">\n        {onPostClick && <PostButton label={postLabel} onClick={onPostClick}/>}\n        &nbsp;&nbsp;\n        {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick}/>}\n        &nbsp;&nbsp;\n        {onDeleteClick &&  <DeleteButton label={deleteLabel} onClick={onDeleteClick}/>}\n      </CCol>\n      <br/><br/><br/>\n    </CRow>\n  )\n}\n\nexport default BottomButtons\n","import React from \"react\"\nimport {CCol, CFormGroup, CInput, CLabel} from \"@coreui/react\"\n\nconst TextCell = props => {\n\tconst {type, label, placeholder, value, onChange} = props\n\n\treturn (\n\t\t<CFormGroup row>\n\t\t\t<CCol md=\"2\" align=\"right\">\n\t\t\t\t<CLabel htmlFor=\"text-input\">{label}</CLabel>\n\t\t\t</CCol>\n\t\t\t<CCol>\n\t\t\t\t<CInput\n          type={type || \"text\"}\n          autoComplete={type === \"password\" ? \"on\" : \"off\"}\n\t\t\t\t\tdisabled={!onChange}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tvalue={value || \"\"}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</CCol>\n\t\t</CFormGroup>\n\t)\n}\n\nexport default TextCell\n","import React, { useEffect, useState } from 'react';\nimport { CCard, CCardBody, CCol } from '@coreui/react';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport { isEmpty, isValidEmail, isValidPhoneNumber } from '../../utils/common/commonFunction';\nimport { useHistory } from 'react-router-dom';\nimport TextCell from '../component/cell/TextCell';\nimport BottomButtons from '../component/Button';\n\nconst User = ({ match }) => {\n    const history = useHistory();\n    const [userId] = useState(match.params.userId);\n    const [email, setEmail] = useState('');\n    const [nickname, setNickname] = useState('');\n    const [name, setName] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [isEditing, setIsEditing] = useState(false);\n    const [showGender, setShowGender] = useState(null);\n    const [birthday, setBirthday] = useState('');\n\n    // 사용자 상세 조회 API 요청\n    useEffect(() => {\n        const getUser = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_USER,\n                    path: { userId: userId },\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    alert(res.message);\n                    history.push('/users');\n                    return;\n                }\n\n                const user1 = res.result;\n                const user = user1[0];\n                setEmail(user.email);\n                setNickname(user.nickname);\n                setPhoneNumber(user.phoneNumber);\n                setName(user.name);\n                if (user.gender == 1) {\n                    setShowGender('남자');\n                } else {\n                    setShowGender('여자');\n                }\n                setBirthday(user.birthday);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n                history.push('/users');\n            }\n        };\n\n        getUser().then();\n    }, []);\n\n    // 사용자 수정 API 요청\n    async function patchUser(parameters) {\n        try {\n            const { data: res } = await TempAdminApi.request({\n                method: HttpMethod.PATCH,\n                url: EndPoint.PATCH_USER,\n                path: { userId: userId },\n                data: parameters,\n            });\n            if (!res?.isSuccess) {\n                alert(res.message);\n                return;\n            }\n\n            alert('사용자 수정에 성공하였습니다.');\n            history.go(0);\n        } catch (error) {\n            console.log(error);\n            alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n        }\n    }\n\n    // 회원 탈퇴 API 요청\n    async function patchUserStatus(userId) {\n        try {\n            const { data: res } = await TempAdminApi.request({\n                method: HttpMethod.PATCH,\n                url: EndPoint.PATCH_USER_STATUS,\n                path: { userId: userId },\n                data: { status: 'INACTIVE' },\n            });\n\n            if (!res.isSuccess) {\n                alert(res.message);\n                return;\n            }\n\n            alert('사용자 삭제에 성공하였습니다.');\n            history.push('/users');\n        } catch (error) {\n            console.log(error);\n            alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n        }\n    }\n\n    // 뒤로가기 버튼 onClick\n    function onBackButtonClick() {\n        history.push(`/users`);\n    }\n\n    // 수정 버튼 onClick\n    function onPatchButtonClick() {\n        if (!isEditing) {\n            setIsEditing(true);\n            return;\n        }\n\n        // if (isEmpty(email.trim())) {\n        //     alert('이메일을 입력해주세요.');\n        //     return;\n        // }\n        // if (!isValidEmail(email.trim())) {\n        //     alert('이메일 형식을 확인해주세요.');\n        //     return;\n        // }\n        if (isEmpty(nickname.trim())) {\n            alert('닉네임을 입력해주세요.');\n            return;\n        }\n        // if (!isEmpty(phoneNumber.trim()) && !isValidPhoneNumber(phoneNumber.trim())) {\n        //     alert('전화번호 형식을 확인해주세요.');\n        //     return;\n        // }\n\n        if (window.confirm('수정하시겠습니까?')) {\n            const parameters = {\n                nickname: nickname.trim(),\n            };\n            patchUser(parameters).then();\n        }\n    }\n\n    // 삭제 버튼 onClick\n    function onDeleteButtonClick() {\n        if (window.confirm('정말로 삭제하시겠습니까?')) {\n            patchUserStatus(userId).then(() => {});\n        }\n    }\n\n    return (\n        <CCol>\n            <CCard>\n                <CCardBody>\n                    <div className=\"form-group\">\n                        <TextCell label=\"유저 고유번호\" value={userId} />\n                        <TextCell\n                            label=\"이메일\"\n                            // placeholder=\"이메일 주소를 입력해주세요\"\n                            value={email}\n                            // onChange={isEditing ? (e) => setEmail(e.target.value) : null}\n                        />\n                        <TextCell label=\"이름\" value={name} />\n                        <TextCell\n                            label=\"닉네임\"\n                            placeholder=\"닉네임을 입력해주세요\"\n                            value={nickname}\n                            onChange={isEditing ? (e) => setNickname(e.target.value) : null}\n                        />\n                        <TextCell\n                            label=\"전화번호\"\n                            // placeholder=\"전화번호를 입력해주세요\"\n                            value={phoneNumber}\n                            // onChange={isEditing ? (e) => setPhoneNumber(e.target.value) : null}\n                        />\n                        <TextCell label=\"성별\" value={showGender} />\n                        <TextCell label=\"생년월일\" value={birthday} />\n                    </div>\n                </CCardBody>\n            </CCard>\n            <BottomButtons\n                onBackClick={onBackButtonClick}\n                onPatchClick={onPatchButtonClick}\n                onDeleteClick={onDeleteButtonClick}\n                patchLabel={isEditing ? '수정완료' : '수정하기'}\n            />\n        </CCol>\n    );\n};\n\nexport default User;\n"],"sourceRoot":""}