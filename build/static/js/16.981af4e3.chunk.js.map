{"version":3,"sources":["views/component/Button.js","views/component/cell/TextCell.js","views/admin/AddAdmin.js"],"names":["BackButton","props","label","onClick","color","shape","size","PostButton","PatchButton","DeleteButton","BottomButtons","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","patchLabel","deleteLabel","align","TextCell","type","placeholder","value","onChange","row","md","htmlFor","autoComplete","disabled","AddAdmin","history","useHistory","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","nickname","setNickname","phoneNumber","setPhoneNumber","parameters","a","TempAdminApi","request","method","HttpMethod","POST","url","EndPoint","POST_ADMIN","data","res","isSuccess","alert","message","push","console","log","className","e","target","isEmpty","trim","isValidEmail","isValidPhoneNumber","window","confirm","postAdmin","then"],"mappings":"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","file":"static/js/16.981af4e3.chunk.js","sourcesContent":["import {CButton, CCol, CRow} from \"@coreui/react\"\nimport React from \"react\"\n\n// 뒤로가기 버튼\nconst BackButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"뒤로가기\"}</CButton>\n  )\n}\n\n// 추가하기 버튼\nconst PostButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"success\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"추가하기\"}</CButton>\n  )\n}\n\n// 수정하기 버튼\nconst PatchButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"primary\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"수정하기\"}</CButton>\n  )\n}\n\n// 삭제하기 버튼\nconst DeleteButton = props => {\n  const {label, onClick} = props\n\n  return (\n    <CButton\n      color=\"danger\"\n      shape=\"square\"\n      size=\"m\"\n      onClick={onClick}\n    >{label || \"삭제하기\"}</CButton>\n  )\n}\n\n// 하단 버튼 모듈\nconst BottomButtons = props => {\n  const {onBackClick, onPostClick, onPatchClick, onDeleteClick,\n    backLabel, postLabel, patchLabel, deleteLabel} = props\n\n  return (\n    <CRow>\n      {onBackClick ?\n        <CCol align=\"left\">\n          <BackButton label={backLabel} onClick={onBackClick}/>\n        </CCol> : <p/>\n      }\n      <CCol align=\"right\">\n        {onPostClick && <PostButton label={postLabel} onClick={onPostClick}/>}\n        &nbsp;&nbsp;\n        {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick}/>}\n        &nbsp;&nbsp;\n        {onDeleteClick &&  <DeleteButton label={deleteLabel} onClick={onDeleteClick}/>}\n      </CCol>\n      <br/><br/><br/>\n    </CRow>\n  )\n}\n\nexport default BottomButtons\n","import React from \"react\"\nimport {CCol, CFormGroup, CInput, CLabel} from \"@coreui/react\"\n\nconst TextCell = props => {\n\tconst {type, label, placeholder, value, onChange} = props\n\n\treturn (\n\t\t<CFormGroup row>\n\t\t\t<CCol md=\"2\" align=\"right\">\n\t\t\t\t<CLabel htmlFor=\"text-input\">{label}</CLabel>\n\t\t\t</CCol>\n\t\t\t<CCol>\n\t\t\t\t<CInput\n          type={type || \"text\"}\n          autoComplete={type === \"password\" ? \"on\" : \"off\"}\n\t\t\t\t\tdisabled={!onChange}\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tvalue={value || \"\"}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t</CCol>\n\t\t</CFormGroup>\n\t)\n}\n\nexport default TextCell\n","import React, { useState } from 'react';\nimport { CCard, CCardBody, CCol } from '@coreui/react';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport { isEmpty, isValidEmail, isValidPhoneNumber } from '../../utils/common/commonFunction';\nimport { useHistory } from 'react-router-dom';\nimport TextCell from '../component/cell/TextCell';\nimport BottomButtons from '../component/Button';\n\nconst AddAdmin = () => {\n    const history = useHistory();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [nickname, setNickname] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n\n    // 관리자 추가 API 요청\n    async function postAdmin(parameters) {\n        try {\n            const { data: res } = await TempAdminApi.request({\n                method: HttpMethod.POST,\n                url: EndPoint.POST_ADMIN,\n                data: parameters,\n            });\n\n            if (!res?.isSuccess) {\n                alert(res.message);\n                return;\n            }\n\n            alert('관리자 추가에 성공하였습니다.');\n            history.push('/users');\n        } catch (error) {\n            console.log(error);\n            alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n        }\n    }\n\n    // 추가 버튼 onClick\n    function onPostButtonClick() {\n        if (isEmpty(email.trim())) {\n            alert('이메일을 입력해주세요.');\n            return;\n        }\n        if (!isValidEmail(email.trim())) {\n            alert('이메일 형식을 확인해주세요.');\n            return;\n        }\n        if (isEmpty(password)) {\n            alert('비밀번호를 입력해주세요.');\n            return;\n        }\n        if (isEmpty(confirmPassword)) {\n            alert('비밀번호 확인을 입력해주세요.');\n            return;\n        }\n        if (password !== confirmPassword) {\n            alert('비밀번호가 일치하지 않습니다.');\n            return;\n        }\n        if (isEmpty(nickname.trim())) {\n            alert('닉네임을 입력해주세요.');\n            return;\n        }\n        if (!isEmpty(phoneNumber.trim()) && !isValidPhoneNumber(phoneNumber.trim())) {\n            alert('전화번호 형식을 확인해주세요.');\n            return;\n        }\n\n        if (window.confirm('추가하시겠습니까?')) {\n            const parameters = {\n                email: email.trim(),\n                password: password,\n                confirmPassword: confirmPassword,\n                nickname: nickname.trim(),\n                phoneNumber: phoneNumber.trim(),\n            };\n            postAdmin(parameters).then();\n        }\n    }\n\n    return (\n        <CCol>\n            <CCard>\n                <CCardBody>\n                    <div className=\"form-group\">\n                        <TextCell\n                            label=\"이메일\"\n                            placeholder=\"이메일 주소를 입력해주세요\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                        <TextCell\n                            type=\"password\"\n                            label=\"비밀번호\"\n                            placeholder=\"비밀번호를 입력해주세요\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        <TextCell\n                            type=\"password\"\n                            label=\"비밀번호 확인\"\n                            placeholder=\"비밀번호를 한번 더 입력해주세요\"\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        />\n                        <TextCell\n                            label=\"닉네임\"\n                            placeholder=\"닉네임을 입력해주세요\"\n                            value={nickname}\n                            onChange={(e) => setNickname(e.target.value)}\n                        />\n                        <TextCell\n                            label=\"전화번호\"\n                            placeholder=\"전화번호를 입력해주세요\"\n                            value={phoneNumber}\n                            onChange={(e) => setPhoneNumber(e.target.value)}\n                        />\n                    </div>\n                </CCardBody>\n            </CCard>\n            <BottomButtons onPostClick={onPostButtonClick} />\n        </CCol>\n    );\n};\n\nexport default AddAdmin;\n"],"sourceRoot":""}