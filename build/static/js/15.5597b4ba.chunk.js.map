{"version":3,"sources":["views/admin/Admins.js","views/component/Button.js","constant/Constants.js","views/component/Badge.js","views/component/Table.js"],"names":["Admins","history","useHistory","useState","admins","setAdmins","useEffect","a","TempAdminApi","request","method","HttpMethod","GET","url","EndPoint","GET_ADMINS","res","data","isSuccess","isEmpty","result","alert","message","push","console","log","getAdmins","then","align","items","fields","key","_classes","label","_style","width","filter","sorter","scopedSlots","tableScopedSlots","hover","striped","columnFilter","pagination","tablePagination","itemsPerPage","BackButton","props","onClick","color","shape","size","CancleButton","AdminButton","RegistButton","CloseButton","PostButton","RoomPostButton","PatchButton","DeleteButton","BottomButtons","onAdminClick","onCancleClick","onRegistClick","onBackClick","onPostClick","onPatchClick","onDeleteClick","backLabel","postLabel","adminLabel","patchLabel","deleteLabel","cancleLabel","registLabel","RoomPostLabel","onCloseClick","onRoomPostClick","getStatusBadgeColor","status","getDeleteBadgeColor","getSnsIdBadgeColor","snsId","tableStatusField","tableEnterpriseAndProgramStatusField","tableSnsIdField","tableStatusScopedSlot","className","style","fontSize","getStatusBadgeText","cellStatusBadge","tableDeleteStatusScopedSlot","getDeleteBadgeText","cellDeleteBadge","tableSnsIdScopedSlot","getSnsIdBadgeText","cellSnsIdBadge","item","deleteStatus","doubleArrows"],"mappings":"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","file":"static/js/15.5597b4ba.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport { CCard, CCardBody, CCol, CDataTable } from '@coreui/react';\nimport TempAdminApi, { EndPoint, HttpMethod } from '../../constant/TempAdminApi';\nimport { itemsPerPage } from '../../constant/Constants';\nimport { isEmpty } from '../../utils/common/commonFunction';\nimport {\n    tablePagination,\n    tableScopedSlots,\n    tableStatusField,\n    tableSnsIdField,\n} from '../component/Table';\nimport BottomButtons from '../component/Button';\n\nconst Admins = () => {\n    const history = useHistory();\n    const [admins, setAdmins] = useState([]);\n\n    // 관계자 전체 조회 API 요청\n    useEffect(() => {\n        const getAdmins = async () => {\n            try {\n                const { data: res } = await TempAdminApi.request({\n                    method: HttpMethod.GET,\n                    url: EndPoint.GET_ADMINS,\n                });\n\n                if (!res?.isSuccess || isEmpty(res?.result)) {\n                    alert(res.message);\n                    history.push('/users');\n                    return;\n                }\n                setAdmins(res.result);\n            } catch (error) {\n                console.log(error);\n                alert('네트워크 통신 실패. 잠시후 다시 시도해주세요.');\n            }\n        };\n\n        getAdmins().then();\n    }, []);\n\n    // 테이블 속성 - fields\n    const tableFields = [\n        {\n            key: 'adminId',\n            _classes: 'font-weight-bold',\n            label: '고유번호',\n            _style: { width: '120px' },\n            filter: false,\n            sorter: true,\n        },\n        {\n            key: 'enterpriseId',\n            _classes: 'font-weight-bold',\n            label: '업체 고유번호',\n            _style: { width: '120px' },\n            filter: true,\n            sorter: true,\n        },\n        {\n            key: 'nickname',\n            label: '닉네임',\n            filter: true,\n            sorter: true,\n        },\n        {\n            key: 'email',\n            label: '이메일',\n            filter: true,\n            sorter: true,\n        },\n    ];\n\n    return (\n        <CCol>\n            <CCard>\n                <CCardBody align=\"center\">\n                    <CDataTable\n                        items={admins}\n                        fields={tableFields}\n                        scopedSlots={tableScopedSlots}\n                        hover\n                        striped\n                        sorter\n                        columnFilter\n                        pagination={tablePagination}\n                        itemsPerPage={itemsPerPage}\n                    />\n                </CCardBody>\n            </CCard>\n        </CCol>\n    );\n};\n\nexport default Admins;\n","import { CButton, CCol, CRow } from '@coreui/react';\nimport React from 'react';\n\n// 뒤로가기 버튼\nconst BackButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '뒤로가기'}\n        </CButton>\n    );\n};\n\n// 취소 버튼\nconst CancleButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"danger\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '예약 취소'}\n        </CButton>\n    );\n};\n\n// 관리자 추가 버튼\nconst AdminButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '추가하기'}\n        </CButton>\n    );\n};\n\n// 승인 버튼\nconst RegistButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '예약 승인'}\n        </CButton>\n    );\n};\n\n// 닫기 버튼\nconst CloseButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '닫기'}\n        </CButton>\n    );\n};\n\n// 추가하기 버튼\nconst PostButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '프로그램 추가하기'}\n        </CButton>\n    );\n};\n\n// 가격 추가하기 버튼\nconst RoomPostButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"success\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '추가하기'}\n        </CButton>\n    );\n};\n\n// 수정하기 버튼\nconst PatchButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"primary\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '수정하기'}\n        </CButton>\n    );\n};\n\n// 삭제하기 버튼\nconst DeleteButton = (props) => {\n    const { label, onClick } = props;\n\n    return (\n        <CButton color=\"danger\" shape=\"square\" size=\"m\" onClick={onClick}>\n            {label || '삭제하기'}\n        </CButton>\n    );\n};\n\n// 하단 버튼 모듈\nconst BottomButtons = (props) => {\n    const {\n        onAdminClick,\n        onCancleClick,\n        onRegistClick,\n        onBackClick,\n        onPostClick,\n        onPatchClick,\n        onDeleteClick,\n        backLabel,\n        postLabel,\n        adminLabel,\n        patchLabel,\n        deleteLabel,\n        cancleLabel,\n        registLabel,\n        RoomPostLabel,\n        onCloseClick,\n        onRoomPostClick,\n    } = props;\n\n    return (\n        <CRow>\n            {onBackClick ? (\n                <CCol align=\"left\">\n                    <BackButton label={backLabel} onClick={onBackClick} />\n                </CCol>\n            ) : (\n                <p />\n            )}\n            {onCloseClick ? (\n                <CCol align=\"left\">\n                    <CloseButton label={backLabel} onClick={onCloseClick} />\n                </CCol>\n            ) : (\n                <p />\n            )}\n            <CCol align=\"right\">\n                {onRegistClick && <RegistButton label={registLabel} onClick={onRegistClick} />}\n                &nbsp;&nbsp;\n                {onCancleClick && <CancleButton label={cancleLabel} onClick={onCancleClick} />}\n                &nbsp;&nbsp;\n                {onPostClick && <PostButton label={postLabel} onClick={onPostClick} />}\n                &nbsp;&nbsp;\n                {onAdminClick && <AdminButton label={adminLabel} onClick={onAdminClick} />}\n                &nbsp;&nbsp;\n                {onPatchClick && <PatchButton label={patchLabel} onClick={onPatchClick} />}\n                &nbsp;&nbsp;\n                {onRoomPostClick && (\n                    <RoomPostButton label={RoomPostLabel} onClick={onRoomPostClick} />\n                )}\n                {onDeleteClick && <DeleteButton label={deleteLabel} onClick={onDeleteClick} />}\n            </CCol>\n            <br />\n            <br />\n            <br />\n        </CRow>\n    );\n};\n\nexport default BottomButtons;\n","export const itemsPerPage = 10\n","import React from 'react';\nimport { CBadge } from '@coreui/react';\n\nfunction getStatusBadgeColor(status) {\n    switch (status) {\n        case 'ACTIVE':\n            return 'success';\n        case 'DEACTIVATE':\n            return 'secondary';\n        case 'INACTIVE':\n            return 'danger';\n        default:\n            return 'primary';\n    }\n}\n\nfunction getStatusBadgeText(status) {\n    switch (status) {\n        case 'ACTIVE':\n            return '활성';\n        case 'DEACTIVATE':\n            return '비활성';\n        case 'INACTIVE':\n            return '탈퇴';\n        default:\n            return '';\n    }\n}\n\nfunction getDeleteBadgeColor(status) {\n    switch (status) {\n        case 'ACTIVE':\n            return 'success';\n        case 'DEACTIVATE':\n            return 'secondary';\n        case 'INACTIVE':\n            return 'danger';\n        default:\n            return 'primary';\n    }\n}\n\nfunction getDeleteBadgeText(status) {\n    switch (status) {\n        case 'ACTIVE':\n            return '활성';\n        case 'DEACTIVATE':\n            return '비활성';\n        case 'INACTIVE':\n            return '삭제';\n        default:\n            return '';\n    }\n}\n\nfunction getSnsIdBadgeColor(snsId) {\n    switch (snsId) {\n        case 0:\n            return 'light';\n        default:\n            return 'warning';\n    }\n}\n\nfunction getSnsIdBadgeText(snsId) {\n    switch (snsId) {\n        case 0:\n            return '일반';\n        default:\n            return '카카오';\n    }\n}\n\nexport function cellStatusBadge(status) {\n    return <CBadge color={getStatusBadgeColor(status)}>{getStatusBadgeText(status)}</CBadge>;\n}\n\nexport function cellDeleteBadge(status) {\n    return <CBadge color={getDeleteBadgeColor(status)}>{getDeleteBadgeText(status)}</CBadge>;\n}\n\nexport function cellSnsIdBadge(snsId) {\n    return <CBadge color={getSnsIdBadgeColor(snsId)}>{getSnsIdBadgeText(snsId)}</CBadge>;\n}\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport Moment from 'react-moment';\nimport { SizePerPageDropDown } from 'react-bootstrap-table';\nimport { itemsPerPage } from '../../constant/Constants';\nimport { cellStatusBadge, cellSnsIdBadge, cellDeleteBadge } from './Badge';\nimport { CButton } from '@coreui/react';\n\n// tableField - 상태\nexport const tableStatusField = {\n    key: 'status',\n    label: '상태',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: true,\n};\n\n// tableField - 상태\nexport const tableEnterpriseAndProgramStatusField = {\n    key: 'deleteStatus',\n    label: '상태',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: true,\n};\n\n// tableField - 로그인 유형\nexport const tableSnsIdField = {\n    key: 'snsId',\n    label: '로그인 유형',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: true,\n};\n\n// tableField - 조회\nexport const tableGetField = {\n    key: 'get',\n    label: '',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: false,\n};\n\n// tableField - 수정\nexport const tablePatchField = {\n    key: 'patch',\n    label: '',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: false,\n};\n\n// tableField - 삭제\nexport const tableDeleteField = {\n    key: 'delete',\n    label: '',\n    _style: { width: '120px' },\n    filter: false,\n    sorter: false,\n};\n\n// tableScopedSlot - 상태\nexport function tableStatusScopedSlot(status) {\n    return (\n        <td className=\"py-2\" style={{ fontSize: '18px' }}>\n            {cellStatusBadge(status)}\n        </td>\n    );\n}\n\n// tableScopedSlot - 상태\nexport function tableDeleteStatusScopedSlot(status) {\n    return (\n        <td className=\"py-2\" style={{ fontSize: '18px' }}>\n            {cellDeleteBadge(status)}\n        </td>\n    );\n}\n\n// tableScopedSlot - 로그인 유형\nexport function tableSnsIdScopedSlot(snsId) {\n    return (\n        <td className=\"py-2\" style={{ fontSize: '18px' }}>\n            {cellSnsIdBadge(snsId)}\n        </td>\n    );\n}\n\n// tableScopedSlot - 조회\nexport function tableGetScopedSlot(onClick) {\n    return (\n        <td className=\"py-2\">\n            <CButton color=\"success\" variant=\"outline\" shape=\"square\" size=\"sm\" onClick={onClick}>\n                조회\n            </CButton>\n        </td>\n    );\n}\n\n// tableScopedSlot - 수정\nexport function tablePatchScopedSlot(onClick) {\n    return (\n        <td className=\"py-2\">\n            <CButton color=\"primary\" variant=\"outline\" shape=\"square\" size=\"sm\" onClick={onClick}>\n                수정\n            </CButton>\n        </td>\n    );\n}\n\n// tableScopedSlot - 삭제\nexport function tableDeleteScopedSlot(onClick) {\n    return (\n        <td className=\"py-2\">\n            <CButton color=\"danger\" variant=\"outline\" shape=\"square\" size=\"sm\" onClick={onClick}>\n                삭제\n            </CButton>\n        </td>\n    );\n}\n\n// tableScopedSlots - 기본값\nexport const tableScopedSlots = {\n    status: (item) => tableStatusScopedSlot(item.status),\n    deleteStatus: (item) => tableDeleteStatusScopedSlot(item.status),\n    snsId: (item) => tableSnsIdScopedSlot(item.snsId),\n};\n\n// tablePagination - 기본값\nexport const tablePagination = {\n    doubleArrows: true,\n    align: 'center',\n};\n\n// tableFilter - 기본값\nexport function tableFilter(label, placeholder) {\n    return {\n        label: label,\n        placeholder: placeholder,\n    };\n}\n\nexport const tableOptions = {\n    sortIndicator: true,\n    paginationSize: itemsPerPage,\n    clearSearch: true,\n    withFirstAndLast: true,\n    clearSearchBtn: createCustomClearButton,\n    sizePerPageDropDown: renderSizePerPageDropDown,\n    paginationShowsTotal: renderShowsTotal,\n};\n\nexport const tableCustomOptions = {\n    sortIndicator: true,\n    paginationSize: itemsPerPage,\n    clearSearch: true,\n    withFirstAndLast: true,\n    sizePerPageDropDown: renderSizePerPageDropDown,\n    clearSearchBtn: createCustomClearButton,\n    paginationShowsTotal: renderShowsTotal,\n};\n\nexport function renderShowsTotal(start, to, total) {\n    return (\n        <p style={{ color: 'black' }}>\n            From {start} to {to}, totals is {total}&nbsp;&nbsp;\n        </p>\n    );\n}\n\nexport function renderDate(cell, row, enumObject, rowIndex) {\n    if (!cell) {\n        return cell;\n    }\n    return <Moment format=\"YYYY.MM.DD HH:mm:ss\">{cell}</Moment>;\n}\n\nexport function renderMoney(cell, row, enumObject, rowIndex) {\n    if (!cell) {\n        return cell;\n    }\n    return cell.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + '원';\n}\n\n// size per page start\n\n/*\nfunction onToggleDropDown(toggleDropDown) {\n  // do your stuff here\n  //console.log(\"toggle dropdown\")\n  //toggleDropDown()\n}\n */\n\nfunction renderSizePerPageDropDown(props) {\n    return (\n        <SizePerPageDropDown\n            className=\"my-size-per-page\"\n            variation=\"dropup\"\n            {...props}\n            //onClick={() => onToggleDropDown(props.toggleDropDown)}\n        />\n    );\n}\n\n// size per page end\n\n// clear button custom start\nfunction handleClearButtonClick(onClick) {\n    // Custom your onClick event here,\n    // it's not necessary to implement this function if you have no any process before onClick\n    // console.log(\"This is my custom function for ClearSearchButton click event\")\n    onClick();\n}\n\nfunction createCustomClearButton(onClick) {\n    return (\n        <Button\n            className=\"my-custom-class ml-2\"\n            color=\"success\"\n            size=\"sm\"\n            onClick={(e) => handleClearButtonClick(onClick)}\n        >\n            초기화\n        </Button>\n    );\n    // If you want have more power to custom the child of ClearSearchButton,\n    // you can do it like following\n    // return (\n    //   <ClearSearchButton\n    //     btnContextual=\"btn-warning\"\n    //     className=\"my-custom-class\"\n    //     onClick={ () => this.handleClearButtonClick(onClick) }>\n    //     { ... }\n    //   </ClearSearchButton>\n    // )\n}\n\n// clear button custom end\n"],"sourceRoot":""}